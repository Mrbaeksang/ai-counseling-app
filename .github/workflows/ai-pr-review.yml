name: AI Code Review

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  ai-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: AI Code Review
        uses: actions/github-script@v7
        with:
          script: |
            const OPENROUTER_API_KEY = '${{ secrets.OPENROUTER_API_KEY }}';
            
            const diff = await github.rest.repos.compareCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: context.payload.pull_request.base.sha,
              head: context.payload.pull_request.head.sha
            });
            
            // 모든 변경 파일 리뷰 (바이너리 제외)
            const filesToReview = diff.data.files.filter(file => 
              file.patch && // 패치가 있는 파일만 (바이너리 제외)
              !file.filename.includes('test/resources/') &&
              !file.filename.includes('build/')
            );
            
            if (filesToReview.length === 0) {
              console.log('No files to review');
              return;
            }
            
            console.log(`Found ${filesToReview.length} files to review`);
            
            // 파일 타입별 분류
            const fileCategories = {
              entities: [],
              services: [],
              controllers: [],
              dtos: [],
              repositories: [],
              configs: [],
              tests: [],
              others: []
            };
            
            filesToReview.forEach(file => {
              if (file.filename.includes('/entity/')) fileCategories.entities.push(file);
              else if (file.filename.includes('/service/')) fileCategories.services.push(file);
              else if (file.filename.includes('/controller/')) fileCategories.controllers.push(file);
              else if (file.filename.includes('/dto/')) fileCategories.dtos.push(file);
              else if (file.filename.includes('/repository/')) fileCategories.repositories.push(file);
              else if (file.filename.includes('/config/') || file.filename.endsWith('.yml') || file.filename.endsWith('.yaml')) fileCategories.configs.push(file);
              else if (file.filename.includes('/test/')) fileCategories.tests.push(file);
              else fileCategories.others.push(file);
            });
            
            // 전체 변경사항 요약
            const summary = {
              total: filesToReview.length,
              additions: diff.data.files.reduce((sum, f) => sum + f.additions, 0),
              deletions: diff.data.files.reduce((sum, f) => sum + f.deletions, 0),
              categories: Object.entries(fileCategories).filter(([_, files]) => files.length > 0)
                .map(([category, files]) => `${category}: ${files.length}개`)
            };
            
            // PR 전체 리뷰 시작
            let overallReview = `# 🤖 AI 코드 리뷰 보고서\n\n`;
            overallReview += `## 📊 변경 통계\n`;
            overallReview += `- **총 파일 수**: ${summary.total}개\n`;
            overallReview += `- **추가된 라인**: +${summary.additions}\n`;
            overallReview += `- **삭제된 라인**: -${summary.deletions}\n`;
            overallReview += `- **카테고리별**: ${summary.categories.join(', ')}\n\n`;
            
            // 아키텍처 레벨 리뷰를 위한 전체 컨텍스트 수집
            const architectureContext = {
              hasEntityChanges: fileCategories.entities.length > 0,
              hasServiceChanges: fileCategories.services.length > 0,
              hasControllerChanges: fileCategories.controllers.length > 0,
              hasDtoChanges: fileCategories.dtos.length > 0,
              hasTestChanges: fileCategories.tests.length > 0,
              fileNames: filesToReview.map(f => f.filename)
            };
            
            // 모든 파일 변경사항을 하나의 요청으로 통합
            overallReview += `## 📝 코드 리뷰\n\n`;
            
            // 전체 변경사항을 한번에 수집
            let allChanges = '';
            const filesSummary = [];
            
            for (const file of filesToReview) {
              filesSummary.push(`- ${file.filename} (+${file.additions}/-${file.deletions})`);
              allChanges += `\n### ${file.filename}\n`;
              allChanges += `\`\`\`diff\n${file.patch}\n\`\`\`\n`;
            }
            
            console.log('Sending single API request for all files...');
            
            try {
              const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
                method: 'POST',
                headers: {
                  'Authorization': `Bearer ${OPENROUTER_API_KEY}`,
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                  model: 'deepseek/deepseek-v3.1-base',  // DeepSeek V3.1 모델 (안정적인 코드 리뷰)
                  messages: [{
                    role: 'system',
                    content: `당신은 Kotlin Spring Boot 전문가입니다.
                    Clean Architecture, DDD 원칙, Spring Boot 베스트 프랙티스를 기준으로 코드를 리뷰합니다.
                    
                    각 파일별로 다음 형식으로 리뷰해주세요:
                    
                    #### 📄 [파일명]
                    🟢 **Good**: 잘 작성된 부분
                    🟡 **Suggest**: 개선 제안 
                    🔴 **Issue**: 반드시 수정이 필요한 문제점
                    💡 **Tip**: 추가 개선 아이디어
                    
                    특히 다음을 중점적으로 확인하세요:
                    - Entity: JPA 매핑, 연관관계, N+1 문제
                    - Service: 트랜잭션, 비즈니스 로직, 예외 처리
                    - Controller: RESTful 원칙, HTTP 상태 코드, 검증
                    - DTO: data class 사용, nullable 타입, 불변성
                    - Repository: 쿼리 최적화, 네이밍 규칙
                    - Test: 테스트 커버리지, MockK 사용, 격리성
                    - Config: 보안 설정, 환경 분리
                    
                    코드 예시는 Kotlin 문법으로 작성하세요.`
                  }, {
                    role: 'user',
                    content: `다음 PR의 ${filesToReview.length}개 파일을 리뷰해주세요:
                    
                    변경된 파일:
                    ${filesSummary.join('\n')}
                    
                    전체 변경사항:
                    ${allChanges}
                    
                    각 파일별로 구체적인 리뷰를 제공해주세요.`
                  }],
                  max_tokens: 4000,  // 전체 리뷰를 위해 토큰 증가
                  temperature: 0.3
                })
              });
              
              if (response.ok) {
                const result = await response.json();
                overallReview += result.choices[0].message.content + '\n\n';
                console.log('✅ Single API review completed successfully!');
              } else {
                const errorText = await response.text();
                console.error('API request failed:', response.status, errorText);
                overallReview += `> ⚠️ 리뷰 실패: ${response.status} - ${errorText}\n\n`;
              }
            } catch (error) {
              console.error('Error during review:', error);
              overallReview += `> ⚠️ 리뷰 실패: ${error.message}\n\n`;
            }
            
            // 체크리스트 추가
            overallReview += `## ✅ 체크리스트\n\n`;
            overallReview += `- [ ] 모든 테스트가 통과하는가?\n`;
            overallReview += `- [ ] Ktlint 규칙을 준수하는가?\n`;
            overallReview += `- [ ] API 문서가 업데이트되었는가?\n`;
            overallReview += `- [ ] 마이그레이션 스크립트가 필요한가?\n`;
            overallReview += `- [ ] 보안 취약점은 없는가?\n\n`;
            
            overallReview += `---\n`;
            overallReview += `*🤖 AI Review powered by Qwen3 Coder via OpenRouter*\n`;
            overallReview += `*⏱️ Reviewed at: ${new Date().toISOString()}*`;
            
            // 최종 리뷰 제출
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              body: overallReview,
              event: 'COMMENT'
            });
            
            console.log(`✅ Review completed for ${filesToReview.length} files!`);