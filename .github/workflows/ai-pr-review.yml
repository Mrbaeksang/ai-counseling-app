name: AI Code Review

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  ai-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: AI Code Review
        uses: actions/github-script@v7
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        with:
          script: |
            const diff = await github.rest.repos.compareCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: context.payload.pull_request.base.sha,
              head: context.payload.pull_request.head.sha
            });
            
            // 모든 변경 파일 리뷰 (바이너리 제외)
            const filesToReview = diff.data.files.filter(file => 
              file.patch && // 패치가 있는 파일만 (바이너리 제외)
              !file.filename.includes('test/resources/') &&
              !file.filename.includes('build/')
            );
            
            if (filesToReview.length === 0) {
              console.log('No files to review');
              return;
            }
            
            console.log(`Found ${filesToReview.length} files to review`);
            
            // 파일 타입별 분류
            const fileCategories = {
              entities: [],
              services: [],
              controllers: [],
              dtos: [],
              repositories: [],
              configs: [],
              tests: [],
              others: []
            };
            
            filesToReview.forEach(file => {
              if (file.filename.includes('/entity/')) fileCategories.entities.push(file);
              else if (file.filename.includes('/service/')) fileCategories.services.push(file);
              else if (file.filename.includes('/controller/')) fileCategories.controllers.push(file);
              else if (file.filename.includes('/dto/')) fileCategories.dtos.push(file);
              else if (file.filename.includes('/repository/')) fileCategories.repositories.push(file);
              else if (file.filename.includes('/config/') || file.filename.endsWith('.yml') || file.filename.endsWith('.yaml')) fileCategories.configs.push(file);
              else if (file.filename.includes('/test/')) fileCategories.tests.push(file);
              else fileCategories.others.push(file);
            });
            
            // 전체 변경사항 요약
            const summary = {
              total: filesToReview.length,
              additions: diff.data.files.reduce((sum, f) => sum + f.additions, 0),
              deletions: diff.data.files.reduce((sum, f) => sum + f.deletions, 0),
              categories: Object.entries(fileCategories).filter(([_, files]) => files.length > 0)
                .map(([category, files]) => `${category}: ${files.length}개`)
            };
            
            // PR 전체 리뷰 시작
            let overallReview = `# 🤖 AI 코드 리뷰 보고서\n\n`;
            overallReview += `## 📊 변경 통계\n`;
            overallReview += `- **총 파일 수**: ${summary.total}개\n`;
            overallReview += `- **추가된 라인**: +${summary.additions}\n`;
            overallReview += `- **삭제된 라인**: -${summary.deletions}\n`;
            overallReview += `- **카테고리별**: ${summary.categories.join(', ')}\n\n`;
            
            // 아키텍처 레벨 리뷰를 위한 전체 컨텍스트 수집
            const architectureContext = {
              hasEntityChanges: fileCategories.entities.length > 0,
              hasServiceChanges: fileCategories.services.length > 0,
              hasControllerChanges: fileCategories.controllers.length > 0,
              hasDtoChanges: fileCategories.dtos.length > 0,
              hasTestChanges: fileCategories.tests.length > 0,
              fileNames: filesToReview.map(f => f.filename)
            };
            
            // 전체 아키텍처 리뷰
            if (summary.total > 3) {
              try {
                const archResponse = await fetch('https://openrouter.ai/api/v1/chat/completions', {
                  method: 'POST',
                  headers: {
                    'Authorization': `Bearer ${process.env.OPENROUTER_API_KEY}`,
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({
                    model: 'deepseek/deepseek-r1-0528:free',  // 아키텍처 분석용 (추론 능력 우수)
                    messages: [{
                      role: 'system',
                      content: `당신은 Kotlin Spring Boot 아키텍처 전문가입니다.
                      Clean Architecture와 DDD 원칙을 기준으로 전체적인 설계를 평가해주세요.`
                    }, {
                      role: 'user',
                      content: `PR 전체 변경사항:
                      - Entity 변경: ${fileCategories.entities.map(f => f.filename).join(', ')}
                      - Service 변경: ${fileCategories.services.map(f => f.filename).join(', ')}
                      - Controller 변경: ${fileCategories.controllers.map(f => f.filename).join(', ')}
                      - DTO 변경: ${fileCategories.dtos.map(f => f.filename).join(', ')}
                      
                      아키텍처 관점에서 다음을 평가해주세요:
                      1. 계층간 의존성 방향
                      2. 도메인 로직 위치의 적절성
                      3. DTO와 Entity 분리
                      4. 트랜잭션 경계
                      5. 테스트 커버리지`
                    }],
                    max_tokens: 1000,
                    temperature: 0.3
                  })
                });
                
                if (archResponse.ok) {
                  const result = await archResponse.json();
                  overallReview += `## 🏗️ 아키텍처 리뷰\n${result.choices[0].message.content}\n\n`;
                }
              } catch (error) {
                console.error('Architecture review failed:', error);
              }
            }
            
            overallReview += `## 📝 파일별 상세 리뷰\n\n`;
            
            // 모든 파일 리뷰 (카테고리별로 정리)
            for (const [category, files] of Object.entries(fileCategories)) {
              if (files.length === 0) continue;
              
              overallReview += `### ${category.toUpperCase()}\n\n`;
              
              for (const file of files) {
                console.log(`Reviewing ${category}: ${file.filename}`);
                
                // 파일 타입별 맞춤 프롬프트 및 모델 선택
                let systemPrompt = '';
                let modelName = '';
                
                if (category === 'entities') {
                  modelName = 'deepseek/deepseek-r1-0528-qwen3-8b:free'; // 구조 분석에 강함
                  systemPrompt = `당신은 JPA/Hibernate 전문가입니다.
                  다음을 중점적으로 리뷰하세요:
                  - @Entity, @Table 어노테이션 적절성
                  - 연관관계 매핑 (@OneToMany, @ManyToOne 등)
                  - Lazy/Eager 로딩 전략
                  - equals/hashCode 구현
                  - Kotlin data class 사용 시 주의점
                  - N+1 문제 가능성`;
                } else if (category === 'services') {
                  modelName = 'qwen/qwen3-coder:free'; // 비즈니스 로직 코드 리뷰 최적화
                  systemPrompt = `당신은 Spring Boot 서비스 레이어 전문가입니다.
                  다음을 중점적으로 리뷰하세요:
                  - @Transactional 적절성
                  - 비즈니스 로직 위치
                  - 예외 처리 전략
                  - DTO <-> Entity 변환
                  - 의존성 주입 방식
                  - 메서드 단일 책임 원칙`;
                } else if (category === 'controllers') {
                  modelName = 'qwen/qwen3-coder:free'; // API 설계 코드 리뷰
                  systemPrompt = `당신은 Spring REST API 전문가입니다.
                  다음을 중점적으로 리뷰하세요:
                  - RESTful 원칙 준수
                  - HTTP 상태 코드 적절성
                  - @Valid 검증
                  - Request/Response DTO 사용
                  - API 버저닝
                  - Swagger 문서화`;
                } else if (category === 'dtos') {
                  modelName = 'deepseek/deepseek-r1-0528-qwen3-8b:free'; // 데이터 구조 분석
                  systemPrompt = `당신은 Kotlin DTO 설계 전문가입니다.
                  다음을 중점적으로 리뷰하세요:
                  - data class 적절성
                  - nullable 타입 사용
                  - 기본값 설정
                  - @Valid 어노테이션
                  - JSON 직렬화 설정
                  - 불변성 보장`;
                } else if (category === 'repositories') {
                  modelName = 'qwen/qwen3-coder:free'; // SQL/JPQL 최적화
                  systemPrompt = `당신은 Spring Data JPA 전문가입니다.
                  다음을 중점적으로 리뷰하세요:
                  - 쿼리 메서드 네이밍
                  - @Query JPQL 최적화
                  - 페이징/정렬 처리
                  - Custom Repository 구현
                  - 영속성 컨텍스트 고려`;
                } else if (category === 'tests') {
                  modelName = 'qwen/qwen3-coder:free'; // 테스트 코드 분석
                  systemPrompt = `당신은 Kotlin 테스트 전문가입니다.
                  다음을 중점적으로 리뷰하세요:
                  - @SpringBootTest vs @WebMvcTest 적절성
                  - MockK 사용법
                  - Given-When-Then 패턴
                  - 테스트 커버리지
                  - 테스트 격리성
                  - Kotest vs JUnit5 일관성`;
                } else if (category === 'configs') {
                  modelName = 'deepseek/deepseek-r1-0528:free'; // 설정 파일 분석
                  systemPrompt = `당신은 Spring Boot 설정 전문가입니다.
                  다음을 중점적으로 리뷰하세요:
                  - 환경별 설정 분리
                  - 보안 정보 노출
                  - 설정값 검증
                  - 프로파일 전략
                  - YAML 구조`;
                } else {
                  modelName = 'qwen/qwen3-coder:free'; // 기본 코드 리뷰
                  systemPrompt = `당신은 Kotlin Spring Boot 전문가입니다.
                  Kotlin 관용구와 Spring Boot 베스트 프랙티스를 기준으로 리뷰하세요.`;
                }
                
                try {
                  const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
                    method: 'POST',
                    headers: {
                      'Authorization': `Bearer ${process.env.OPENROUTER_API_KEY}`,
                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                      model: modelName,  // 카테고리별 최적 모델 사용
                      messages: [{
                        role: 'system',
                        content: systemPrompt + `
                        
                        응답 형식:
                        🟢 **Good**: 잘 작성된 부분 (간단히)
                        🟡 **Suggest**: 개선 제안 (구체적으로)
                        🔴 **Issue**: 문제점 (반드시 수정 필요)
                        💡 **Tip**: 추가 개선 아이디어
                        
                        코드 예시를 제공할 때는 반드시 Kotlin 문법으로 작성하세요.`
                      }, {
                        role: 'user',
                        content: `파일: ${file.filename}
                        추가: +${file.additions} 줄
                        삭제: -${file.deletions} 줄
                        
                        변경사항:
                        \`\`\`diff
                        ${file.patch}
                        \`\`\`
                        
                        위 변경사항을 리뷰해주세요.`
                      }],
                      max_tokens: 800,
                      temperature: 0.2
                    })
                  });
                  
                  if (response.ok) {
                    const result = await response.json();
                    const review = result.choices[0].message.content;
                    
                    overallReview += `#### 📄 \`${file.filename}\`\n`;
                    overallReview += `> 📈 +${file.additions} / -${file.deletions} lines\n\n`;
                    overallReview += review + '\n\n';
                  } else {
                    console.error(`Failed to review ${file.filename}:`, response.statusText);
                    overallReview += `#### 📄 \`${file.filename}\`\n`;
                    overallReview += `> ⚠️ 리뷰 실패: API 응답 오류\n\n`;
                  }
                } catch (error) {
                  console.error(`Error reviewing ${file.filename}:`, error);
                  overallReview += `#### 📄 \`${file.filename}\`\n`;
                  overallReview += `> ⚠️ 리뷰 실패: ${error.message}\n\n`;
                }
                
                // API 제한 방지 (0.5초 딜레이)
                await new Promise(resolve => setTimeout(resolve, 500));
              }
            }
            
            // 체크리스트 추가
            overallReview += `## ✅ 체크리스트\n\n`;
            overallReview += `- [ ] 모든 테스트가 통과하는가?\n`;
            overallReview += `- [ ] Ktlint 규칙을 준수하는가?\n`;
            overallReview += `- [ ] API 문서가 업데이트되었는가?\n`;
            overallReview += `- [ ] 마이그레이션 스크립트가 필요한가?\n`;
            overallReview += `- [ ] 보안 취약점은 없는가?\n\n`;
            
            overallReview += `---\n`;
            overallReview += `*🤖 AI Review powered by:*\n`;
            overallReview += `*• Qwen3 Coder (코드 리뷰)*\n`;
            overallReview += `*• DeepSeek R1 (아키텍처 분석)*\n`;
            overallReview += `*• DeepSeek R1-Qwen3 (구조 분석)*\n`;
            overallReview += `*via OpenRouter (Free Models)*\n`;
            overallReview += `*⏱️ Reviewed at: ${new Date().toISOString()}*`;
            
            // 최종 리뷰 제출
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              body: overallReview,
              event: 'COMMENT'
            });
            
            console.log(`✅ Review completed for ${filesToReview.length} files!`);